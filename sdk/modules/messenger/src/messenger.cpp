//  Copyright (C) 2015-2020 Virgil Security, Inc.
//
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//      (1) Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//      (2) Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in
//      the documentation and/or other materials provided with the
//      distribution.
//
//      (3) Neither the name of the copyright holder nor the names of its
//      contributors may be used to endorse or promote products derived from
//      this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
//  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
//
//  Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

#include <virgil/iot/messenger/messenger.h>
#include "private/virgil.h"
#include "private/visibility.h"

using namespace VirgilIoTKit;

static vs_messenger_rx_cb_t _rx_cb = NULL;

#define KEY_SZ_MAX (128)
#define CARD_SZ_MAX (4096)
#define TOKEN_SZ_MAX (1024)

const char *_identity = "rk_test_7";

const uint8_t _pubkey[] = {0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70, 0x03, 0x21, 0x00, 0x30, 0xcb, 0xa2,
                           0x08, 0x8d, 0x18, 0x87, 0x96, 0x08, 0xf6, 0x07, 0x2a, 0x11, 0x13, 0xd6, 0xa7, 0xac, 0x06,
                           0x9c, 0xf6, 0x64, 0x28, 0x7f, 0x5e, 0x8e, 0x4a, 0xd9, 0x65, 0x16, 0xb0, 0x18, 0xf9};


const uint8_t _privkey[] = {0x30, 0x2e, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70,
                            0x04, 0x22, 0x04, 0x20, 0x0a, 0x9c, 0x92, 0xdc, 0xa8, 0xab, 0x99, 0x22,
                            0x25, 0x40, 0x22, 0xff, 0x08, 0x42, 0xec, 0xea, 0x1b, 0x32, 0xde, 0x4e,
                            0xf1, 0xee, 0x3d, 0xbc, 0xce, 0x7c, 0x2b, 0xca, 0xbc, 0x0b, 0x1b, 0x94};

const uint8_t _card[] = {
        0x7b, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
        0x22, 0x3a, 0x22, 0x65, 0x79, 0x4a, 0x6a, 0x63, 0x6d, 0x56, 0x68, 0x64, 0x47, 0x56, 0x6b, 0x58, 0x32, 0x46,
        0x30, 0x49, 0x6a, 0x6f, 0x78, 0x4e, 0x54, 0x67, 0x30, 0x4d, 0x7a, 0x63, 0x78, 0x4d, 0x7a, 0x67, 0x32, 0x4c,
        0x43, 0x4a, 0x70, 0x5a, 0x47, 0x56, 0x75, 0x64, 0x47, 0x6c, 0x30, 0x65, 0x53, 0x49, 0x36, 0x49, 0x6e, 0x4a,
        0x72, 0x58, 0x33, 0x52, 0x6c, 0x63, 0x33, 0x52, 0x66, 0x4e, 0x79, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x31, 0x59,
        0x6d, 0x78, 0x70, 0x59, 0x31, 0x39, 0x72, 0x5a, 0x58, 0x6b, 0x69, 0x4f, 0x69, 0x4a, 0x4e, 0x51, 0x32, 0x39,
        0x33, 0x51, 0x6c, 0x46, 0x5a, 0x52, 0x45, 0x73, 0x79, 0x56, 0x6e, 0x64, 0x42, 0x65, 0x55, 0x56, 0x42, 0x54,
        0x55, 0x31, 0x31, 0x61, 0x55, 0x4e, 0x4a, 0x4d, 0x46, 0x6c, 0x6f, 0x4e, 0x56, 0x6c, 0x4a, 0x4f, 0x57, 0x64,
        0x6a, 0x63, 0x55, 0x56, 0x53, 0x55, 0x46, 0x64, 0x77, 0x4e, 0x6e, 0x64, 0x48, 0x62, 0x6c, 0x42, 0x61, 0x61,
        0x30, 0x74, 0x49, 0x4f, 0x57, 0x56, 0x71, 0x61, 0x33, 0x4a, 0x61, 0x57, 0x6c, 0x4a, 0x68, 0x64, 0x30, 0x64,
        0x51, 0x61, 0x7a, 0x30, 0x69, 0x4c, 0x43, 0x4a, 0x32, 0x5a, 0x58, 0x4a, 0x7a, 0x61, 0x57, 0x39, 0x75, 0x49,
        0x6a, 0x6f, 0x69, 0x4e, 0x53, 0x34, 0x77, 0x49, 0x6e, 0x30, 0x3d, 0x22, 0x2c, 0x22, 0x73, 0x69, 0x67, 0x6e,
        0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
        0x72, 0x65, 0x22, 0x3a, 0x22, 0x4d, 0x46, 0x45, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x59, 0x49, 0x5a, 0x49, 0x41,
        0x57, 0x55, 0x44, 0x42, 0x41, 0x49, 0x44, 0x42, 0x51, 0x41, 0x45, 0x51, 0x43, 0x56, 0x6d, 0x36, 0x77, 0x59,
        0x4d, 0x50, 0x58, 0x79, 0x4e, 0x63, 0x6f, 0x73, 0x51, 0x64, 0x4f, 0x6c, 0x4c, 0x52, 0x79, 0x66, 0x2b, 0x6e,
        0x50, 0x69, 0x48, 0x7a, 0x50, 0x59, 0x70, 0x2f, 0x6d, 0x5a, 0x62, 0x4c, 0x73, 0x51, 0x4e, 0x62, 0x54, 0x2f,
        0x2f, 0x45, 0x76, 0x59, 0x68, 0x55, 0x6e, 0x6e, 0x66, 0x65, 0x31, 0x38, 0x79, 0x46, 0x59, 0x64, 0x32, 0x4d,
        0x6b, 0x43, 0x34, 0x78, 0x57, 0x74, 0x68, 0x30, 0x32, 0x2b, 0x55, 0x71, 0x76, 0x7a, 0x77, 0x44, 0x44, 0x7a,
        0x37, 0x45, 0x6f, 0x38, 0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22, 0x2c, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
        0x22, 0x3a, 0x22, 0x73, 0x65, 0x6c, 0x66, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
        0x75, 0x72, 0x65, 0x22, 0x3a, 0x22, 0x4d, 0x46, 0x45, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x59, 0x49, 0x5a, 0x49,
        0x41, 0x57, 0x55, 0x44, 0x42, 0x41, 0x49, 0x44, 0x42, 0x51, 0x41, 0x45, 0x51, 0x42, 0x49, 0x48, 0x4e, 0x56,
        0x4e, 0x46, 0x31, 0x48, 0x50, 0x43, 0x7a, 0x78, 0x4d, 0x42, 0x33, 0x76, 0x66, 0x32, 0x43, 0x57, 0x69, 0x73,
        0x74, 0x34, 0x78, 0x62, 0x50, 0x36, 0x4a, 0x6f, 0x48, 0x53, 0x57, 0x52, 0x53, 0x4b, 0x78, 0x62, 0x4b, 0x67,
        0x70, 0x42, 0x64, 0x75, 0x61, 0x69, 0x65, 0x68, 0x42, 0x66, 0x30, 0x71, 0x2f, 0x73, 0x53, 0x58, 0x6c, 0x2f,
        0x34, 0x4c, 0x2b, 0x69, 0x39, 0x4c, 0x6d, 0x38, 0x67, 0x68, 0x39, 0x50, 0x41, 0x6e, 0x33, 0x4d, 0x53, 0x51,
        0x6a, 0x2b, 0x73, 0x6a, 0x62, 0x4b, 0x4c, 0x67, 0x41, 0x3d, 0x22, 0x2c, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x65,
        0x72, 0x22, 0x3a, 0x22, 0x76, 0x69, 0x72, 0x67, 0x69, 0x6c, 0x22, 0x7d, 0x5d, 0x7d};

/******************************************************************************/
extern "C" DLL_PUBLIC vs_status_e
vs_messenger_start(vs_messenger_rx_cb_t rx_cb) {
    uint8_t pubkey[KEY_SZ_MAX];
    size_t pubkey_sz = 0;

    uint8_t privkey[KEY_SZ_MAX];
    size_t privkey_sz = 0;

    uint8_t card[CARD_SZ_MAX];
    size_t card_sz = 0;

    char virgil_token[TOKEN_SZ_MAX] = {0};

    char pass[TOKEN_SZ_MAX] = {0};

    printf("\n----------------------------------------------------\n\n");
    vs_messenger_virgil_init();

#if 0
    vs_messenger_virgil_sign_up(
            _identity, pubkey, KEY_SZ_MAX, &pubkey_sz, privkey, KEY_SZ_MAX, &privkey_sz, card, CARD_SZ_MAX, &card_sz);
#else
    vs_messenger_virgil_sign_in(_identity, _pubkey, sizeof(_pubkey), _privkey, sizeof(_privkey), _card, sizeof(_card));
#endif

    vs_messenger_virgil_get_token(virgil_token, TOKEN_SZ_MAX);

    vs_messenger_virgil_get_xmpp_pass(pass, TOKEN_SZ_MAX);

    vs_messenger_virgil_logout();


    exit(1);
    return VS_CODE_ERR_NOT_IMPLEMENTED;
}

/******************************************************************************/
extern "C" DLL_PUBLIC vs_status_e
vs_messenger_send(const char *recipient, const char *message) {
    return VS_CODE_ERR_NOT_IMPLEMENTED;
}

/******************************************************************************/
extern "C" DLL_PUBLIC vs_status_e
vs_messenger_stop(void) {
    return VS_CODE_ERR_NOT_IMPLEMENTED;
}

/******************************************************************************/
