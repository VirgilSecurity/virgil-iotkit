//  Copyright (C) 2015-2019 Virgil Security, Inc.
//
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//      (1) Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//      (2) Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in
//      the documentation and/or other materials provided with the
//      distribution.
//
//      (3) Neither the name of the copyright holder nor the names of its
//      contributors may be used to endorse or promote products derived from
//      this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
//  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
//
//  Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

/*! \file storage_hal.h
 * \brief Storage HAL interface
 *
 * Storage is the base helper for communication with file system. Cache mechanism can be used.
 *
 * \section storage_hal Storage HAL Usage
 *
 * Storage context #vs_storage_op_ctx_t has storage specific data and calls implementation.
 *
 * \warning #vs_storage_op_ctx_t has to be implemented by user. You can see an example of Storage context implementation for *NIX systems in <a href="https://github.com/VirgilSecurity/demo-iotkit-nix/blob/release/v0.1.0-alpha/common/src/sdk-impl/storage/storage-nix-impl.c#L297">vs_nix_storage_impl_func() in storage-nix-impl.c</a>
 *
 * Implementation has members listed below :
 *
 * - \a open : opens data file and returns #vs_storage_file_t file descriptor.
 * - \a sync : synchronizes ache if present with file storage.
 * - \a close : closes file.
 * - \a del : securely deletes data on the storage and in the memory if cache is used.
 * - \a size : returns file size or negative value. It could be any error from #vs_status_e list.
 * - \a load : loads data from storage to the memory.
 * - \a save : saves data from memory to the storage.
 * - \a deinit : destroys storage context.
 *
 */

#ifndef VS_STORAGE_HAL_H
#define VS_STORAGE_HAL_H

#include <virgil/iot/status_code/status_code.h>
#include <sys/types.h>

#define VS_STORAGE_ELEMENT_ID_MAX  (32)

typedef uint8_t vs_storage_element_id_t[VS_STORAGE_ELEMENT_ID_MAX];

/** File context
 *
 * This context is generated by user call of \a vs_storage_hal_ctx_t vs_storage_xxx_init.
 */
typedef void *vs_storage_impl_data_ctx_t;

/** File descriptor
 *
 * File descriptor depends on storage implementation
 */
typedef void *vs_storage_file_t;

/** Destroy storage context
 *
 * This function is call during current storage context destroy. After this call \a storage_ctx is incorrect and must be zeroed.
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
typedef vs_status_e (*vs_storage_deinit_hal_t)(
        vs_storage_impl_data_ctx_t storage_ctx);

/** Open storage element
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] id
 *
 * \return Storage specific file descriptor
 */
typedef vs_storage_file_t (*vs_storage_open_hal_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        const vs_storage_element_id_t id);

/** Synchronise storage element
 *
 * Synchronize storage element cache with storage.
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] file Storage file context.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
typedef vs_status_e (*vs_rpi_storage_sync_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        const vs_storage_file_t file);

/** Close storage element
 *
 * \warning After this call file is incorrect and must be reopened.
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] file Storage file context.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
typedef vs_status_e (*vs_storage_close_hal_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        vs_storage_file_t file);

/** Save storage element
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] file Storage file context.
 * \param[in] offset Save data offset.
 * \param[in] in_data Data to be saved. Cannot be NULL.
 * \param[in] data_sz Data size.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
typedef vs_status_e (*vs_storage_save_hal_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        const vs_storage_file_t file,
        size_t offset,
        const uint8_t *in_data,
        size_t data_sz);

/** Load storage element
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] file Storage file context.
 * \param[in] offset Data offset.
 * \param[out] out_data Output storage for loaded data. Cannot be NULL.
 * \param[in] data_sz Data size to be loaded. Cannot be zero.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
typedef vs_status_e (*vs_storage_load_hal_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        const vs_storage_file_t file,
        size_t offset,
        uint8_t *out_data,
        size_t data_sz);

/** Get storage element size
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] id Storage element identifier.
 *
 * \return File size if not negative, #vs_status_e code if any error
 */
typedef ssize_t (*vs_storage_file_size_hal_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        const vs_storage_element_id_t id);

/** Delete storage element
 *
 * \param[in] storage_ctx Storage context. Cannot be NULL.
 * \param[in] id Storage element identifier.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
typedef vs_status_e (*vs_storage_del_hal_t)(
        const vs_storage_impl_data_ctx_t storage_ctx,
        const vs_storage_element_id_t id);

/** Load currently executed firmware descriptor
 *
 * \param[out] descriptor Output buffer to store firmware descriptor. Cannot be NULL.
 *
 * \return #VS_CODE_OK in case of success or error code.
 */
vs_status_e
vs_impl_own_firmware_descriptor(void *descriptor);

/** Storage implementation
 *
 * This structure contains implementations for all storage calls : open, load/save, size, synchronisation etc.
 */
typedef struct {
    vs_storage_deinit_hal_t deinit; /**< Destroy storage context */

    vs_storage_open_hal_t open; /**< Open storage element */
    vs_rpi_storage_sync_t sync; /**< Synchronize storage element cache with storage */
    vs_storage_close_hal_t close; /**< Close storage element */

    vs_storage_save_hal_t save; /**< Save storage element */
    vs_storage_load_hal_t load; /**< Load storage element */
    vs_storage_file_size_hal_t size; /**< Get storage element size */

    vs_storage_del_hal_t del; /**< Delete storage element */
} vs_storage_impl_func_t;

/** Storage element context
 *
 * This structure contains storage implementation and storage specific data
 */
typedef struct {
    vs_storage_impl_func_t impl_func; /**< Implementations */
    vs_storage_impl_data_ctx_t impl_data; /**< Storage element specific data */
    size_t file_sz_limit; /**< Maximum size of storage element */

} vs_storage_op_ctx_t;

#endif //VS_STORAGE_HAL_H
